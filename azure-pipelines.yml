# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
- name: MAVEN_CACHE_FOLDER
  value: $(Pipeline.Workspace)/.m2/repository
- name: MAVEN_OPTS
  value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
- name: GIT_COMMIT
  value: $(Build.SourceVersion)
- group: ARGOCD_LAB

stages:
- stage: 'BUILD'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Maven build jar'
    pool: 
      vmImage: 'ubuntu-latest'
    steps:
    - task: Cache@2
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
          maven
        path: $(MAVEN_CACHE_FOLDER)
      displayName: Cache Maven local repo
    - script: mvn install -B -e
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'
    - task: Maven@3
      displayName: 'Build docker image'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m $(MAVEN_OPTS) -Dspring-boot.build-image.imageName=mtritabaugh/spring-petclinic:$(GIT_COMMIT)'
        goals: 'spring-boot:build-image'
        publishJUnitResults: false
        jdkVersionOption: '11'
    - task: Docker@2
      displayName:
      inputs:
        command: login
        containerRegistry: dockerhub
    - task: Docker@2
      displayName: Push to dockerhub
      inputs:
        command: push
        repository: mtritabaugh/spring-petclinic
        tags: |
          $(GIT_COMMIT)

- stage: 'DEPLOY_DEV'
  displayName: 'Deploy to Dev'
  jobs: 
  - job: 'argocd'
    displayName: 'argocd app set job'
    pool:  'tkg-user-pool'
    steps:
    - script: argocd login 192.168.31.33 --username $(ARGOCD_ADMIN) --password $(ARGOCD_PASSWORD) --insecure
      displayName: 'argocd app login'
    - script: argocd app set petclinic-dev -p image.tag=$(GIT_COMMIT)
      displayName: 'argo set image tag'
