# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

variables:
- name: MAVEN_CACHE_FOLDER
  value: $(Pipeline.Workspace)/.m2/repository
- name: MAVEN_OPTS
  value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  #- name: GIT_COMMIT
  #value: $(Build.SourceVersion)
- group: ARGOCD_LAB
- template: variables.yaml

resources:
  webhooks:
    - webhook: tkg-user
      connection: dockerhub-webhook

stages:
  #- stage: 'BUILD'
  #  displayName: 'Build the web application'
  #jobs: 
  #- job: 'Build'
  #  displayName: 'Build Application Image'
  #  pool: 
  #    vmImage: 'ubuntu-latest'
  #  steps:
  #  - task: Cache@2
  #    displayName: 'Cache Maven local repo'
  #    inputs:
  #      key: 'maven | "$(Agent.OS)" | **/pom.xml'
  #      restoreKeys: |
  #        maven | "$(Agent.OS)"
  #        maven
  #      path: $(MAVEN_CACHE_FOLDER)
  #  - script: mvn install -B -e
  #  - task: Maven@3
  #    displayName: 'maven package'
  #    inputs:
  #      mavenPomFile: 'pom.xml'
  #      mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
  #      javaHomeOption: 'JDKVersion'
  #      jdkVersionOption: '1.11'
  #      jdkArchitectureOption: 'x64'
  #      publishJUnitResults: true
  #      testResultsFiles: '**/surefire-reports/TEST-*.xml'
  #      goals: 'package'
  #  - task: Maven@3
  #    displayName: 'Build docker image'
  #    inputs:
  #      mavenPomFile: 'pom.xml'
  #      mavenOptions: '-Xmx3072m $(MAVEN_OPTS) -Dspring-boot.build-image.imageName=mtritabaugh/spring-petclinic:${{ parameters.tkg-user.pushdata.tag}}'
  #      goals: 'spring-boot:build-image'
  #      publishJUnitResults: false
  #      jdkVersionOption: '11'
  #  - task: Docker@2
  #    displayName: 'Registry login'
  #    inputs:
  #      command: login
  #      containerRegistry: dockerhub
  #  - task: Docker@2
  #    displayName: 'Push to registry'
  #    inputs:
  #      command: push
  #      repository: mtritabaugh/spring-petclinic
  #      tags: |
  #        $(GIT_COMMIT)
  #
- stage: 'DEPLOY_DEV'
  displayName: 'Deploy to Dev'
  jobs: 
  - job: 'argocd_app_set'
    displayName: 'argocd set image tag'
    pool:  'tkg-user-pool'
    steps:
    - script: argocd login argocd.apps.$(CLUSTER) --username $(ARGOCD_ADMIN) --password $(ARGOCD_PASSWORD) --insecure
      displayName: 'argocd login'
    - script: argocd app set $(APP)-dev -p image.tag=${{ parameters.tkg-user.pushdata.tag}}
      displayName: 'argo set image tag'

- stage: 'APPROVAL'
  displayName: "Approval for Prod"
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation  
    pool: server    
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:   
     - task: ManualValidation@0
       timeoutInMinutes: 1440 # task times out in 1 day
       inputs:
           notifyUsers: |
              mtritabaugh@vmware.com
              mtritab@gmail.com
           instructions: 'Please validate the build configuration and resume'
           onTimeout: 'resume'

- stage: 'DEPLOY_PROD'
  displayName: 'Deploy to Prod'
  jobs: 
  - job: 'argocd_app_set'
    displayName: 'argocd set image tag'
    pool:  'tkg-user-pool'
    steps:
    - script: argocd login argocd.apps.$(CLUSTER) --username $(ARGOCD_ADMIN) --password $(ARGOCD_PASSWORD) --insecure
      displayName: 'argocd login'
    - script: argocd app set $(APP)-prod -p image.tag=$(GIT_COMMIT)
      displayName: 'argo set image tag'
